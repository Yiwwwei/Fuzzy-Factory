

Find out the page view sessions
USE mavenfuzzyfactory;

SELECT 
    pageview_url,
    COUNT(DISTINCT website_pageview_id) AS page_view_sessions
FROM 
	website_pageviews
WHERE website_pageview_id < 1000
GROUP BY pageview_url
ORDER BY 2 DESC
----------------------------------------------------------------------
Find the entry page
USE mavenfuzzyfactory;


CREATE TEMPORARY TABLE first_pageview
SELECT
	website_session_id,
    MIN(website_pageview_id) AS min_pageview_id
FROM 
	website_pageviews
WHERE
	website_pageview_id < 1000
GROUP BY 
	website_session_id;
    
SELECT 
    website_pageviews.pageview_url AS landing_page,
    COUNT(DISTINCT first_pageview.website_session_id) AS sessions_hitting_this_lander
FROM first_pageview
	LEFT JOIN website_pageviews
    ON website_pageview_id = first_pageview.min_pageview_id
GROUP BY
	website_pageviews.pageview_url


-------------------------------------------------------------------------
Most viewed website pages, ranked by sessions volume

SELECT 
	pageview_url,
    COUNT(DISTINCT website_pageview_id) AS pageview_sessions
FROM 
	website_pageviews
WHERE
	created_at <'2012-06-09'
GROUP BY
	pageview_url
ORDER BY
	2 DESC

--------------------------------------------------------------------------
Top entry pages

CREATE TEMPORARY TABLE entry_page
SELECT
	website_session_id,
    MIN(website_pageview_id) AS min_view_id
FROM
	website_pageviews
WHERE
	created_at < '2012-06-12'
GROUP BY 
	website_session_id;

SELECT *
FROM entry_page;

SELECT
	website_pageviews.pageview_url AS landing_page,
	COUNT(DISTINCT min_view_id) AS sessions_hitting_this_landing_page
FROM
	entry_page
    LEFT JOIN website_pageviews
    ON website_pageviews.website_pageview_id=entry_page.min_view_id
GROUP BY 
	landing_page
ORDER BY
	2 DESC
--------------------------------------------------------------------------
Bounce Rate

USE mavenfuzzyfactory;
-- Bounce rate
-- step 1: create temporary table, find each session's landing page.
-- 			session_id--minmum_pageview_id
-- step 2: minimun_pageview_id--landing_page
-- step 3: count each session's pageviews (how many pages)
-- step 4: bounce rate


SELECT
	website_pageviews.website_session_id,
    MIN(website_pageviews.website_pageview_id) AS first_pageview_id
FROM
	website_pageviews
    LEFT JOIN website_sessions
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at BETWEEN '2014-01-01' AND '2014-02-01'
GROUP BY 
	website_pageviews.website_session_id;

-- 

CREATE TEMPORARY TABLE first_pageviews
SELECT
	website_pageviews.website_session_id,
    MIN(website_pageviews.website_pageview_id) AS first_pageview_id
FROM
	website_pageviews
    LEFT JOIN website_sessions
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at BETWEEN '2014-01-01' AND '2014-02-01'
GROUP BY 
	website_pageviews.website_session_id;

SELECT * 
FROM first_pageviews;

-- first_pageview to landing_page
CREATE TEMPORARY TABLE sessions_w_landing_page
SELECT 
	first_pageviews.website_session_id,
	website_pageviews.pageview_url AS landing_page
FROM
	first_pageviews
    LEFT JOIN website_pageviews
	ON website_pageviews.website_pageview_id=first_pageviews.first_pageview_id;

-- pageviews per session
-- all sessions to bounced sessions

SELECT *
FROM sessions_w_landing_page;

SELECT
	sessions_w_landing_page.website_session_id,
    sessions_w_landing_page.landing_page,
    COUNT(DISTINCT website_pageviews.website_session_id) AS pps
FROM
	sessions_w_landing_page
    LEFT JOIN website_pageviews
	ON website_pageviews.website_session_id=sessions_w_landing_page.website_session_id
GROUP BY 
	sessions_w_landing_page.website_session_id;

CREATE TEMPORARY TABLE bounce_sessions
SELECT
	sessions_w_landing_page.website_session_id,
    sessions_w_landing_page.landing_page,
    COUNT(DISTINCT website_pageviews.website_pageview_id) AS pps
FROM
	sessions_w_landing_page
    LEFT JOIN website_pageviews
	ON website_pageviews.website_session_id=sessions_w_landing_page.website_session_id
GROUP BY 
	sessions_w_landing_page.website_session_id,
    sessions_w_landing_page.landing_page
HAVING 
	pps=1;

SELECT * FROM bounce_sessions;

SELECT
	sessions_w_landing_page.website_session_id,
    sessions_w_landing_page.landing_page,
    bounce_sessions.website_session_id AS bounced_session_id
FROM
	sessions_w_landing_page
    LEFT JOIN bounce_sessions
    ON sessions_w_landing_page.website_session_id=bounce_sessions.website_session_id
ORDER BY
	sessions_w_landing_page.website_session_id;
    
-- final output to count bounce rate which is based on landing page
-- bounce rate=bounce sessions/sessions

SELECT
	sessions_w_landing_page.landing_page,
    COUNT(DISTINCT sessions_w_landing_page.website_session_id) AS sessions,
    COUNT(DISTINCT bounce_sessions.website_session_id) AS bounced_sessions,
    COUNT(DISTINCT bounce_sessions.website_session_id)/COUNT(DISTINCT sessions_w_landing_page.website_session_id) AS bounce_rate
FROM
	sessions_w_landing_page
    LEFT JOIN bounce_sessions
    ON sessions_w_landing_page.website_session_id=bounce_sessions.website_session_id
GROUP BY 
	sessions_w_landing_page.landing_page
ORDER BY
	sessions_w_landing_page.website_session_id


--------------------------------------------------------------------------
-- Landing pages testing (A/B testing)
-- 1. lander/1 fist pageview
-- 2. first website_pageview_id and its revelant sessions
-- 3. landing page of each session
-- 4. count of pages per session
-- 5. summarizing total sessions and bounce sessions 

-- 1. lander/1 fist pageview
SELECT
	website_pageviews.pageview_url,
    MIN(website_pageviews.created_at) AS first_created_at,
    MIN(website_pageviews.website_pageview_id) AS first_pageview_id
FROM
	website_pageviews
WHERE
	website_pageviews.pageview_url='/lander-1';

-- first_created_at '2012-06-19 00:35:54'
-- first_pageview_id '23504'


-- 2.
-- gsearch+nonbrand first view session


CREATE TEMPORARY TABLE first_test_pageviews
SELECT
	website_pageviews.website_session_id,
    MIN(website_pageview_id) AS min_view_id
FROM
	website_pageviews
	INNER JOIN website_sessions 
    ON website_sessions.website_session_id=website_pageviews.website_session_id
    AND website_pageviews.created_at < '2012-07-28'
    AND website_pageviews.website_pageview_id > '23504'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
    -- inner join is to make sure only pulling data for pageviews where a corresponding session exists in the website_sessions table
    -- where the session meets the additional filtering criteria (utm_)
GROUP BY
	website_pageviews.website_session_id;

-- 3. bring in landing page to each session

CREATE TEMPORARY TABLE test_sessions_lp
SELECT
	first_test_pageviews.website_session_id,
    website_pageviews.pageview_url AS landing_page
FROM
	first_test_pageviews
    LEFT JOIN website_pageviews
    ON first_test_pageviews.min_view_id = website_pageviews.website_pageview_id
WHERE
	website_pageviews.pageview_url IN ('/home','/lander-1');

-- count of pages per session, then limit to only bounce sessions
CREATE TEMPORARY TABLE test_bounce_sessions
SELECT
	test_sessions_lp.website_session_id,
    test_sessions_lp.landing_page,
    COUNT(DISTINCT website_pageviews.website_pageview_id) AS pps
FROM
	test_sessions_lp
    LEFT JOIN website_pageviews
    ON website_pageviews.website_session_id=test_sessions_lp.website_session_id
GROUP BY 
	test_sessions_lp.website_session_id,
    test_sessions_lp.landing_page
HAVING
	pps = 1;

SELECT * FROM test_bounce_sessions;

-- just to see the bounced sessions
SELECT 
	test_sessions_lp.landing_page,
    test_sessions_lp.website_session_id,
    test_bounce_sessions.website_session_id AS bounced_website_session_id
FROM
	test_sessions_lp
    LEFT JOIN test_bounce_sessions
    ON test_sessions_lp.website_session_id = test_bounce_sessions.website_session_id
ORDER BY 
	test_sessions_lp.website_session_id;
 
 
-- finally output

SELECT 
	test_sessions_lp.landing_page,
    COUNT(DISTINCT test_sessions_lp.website_session_id) AS sessions,
    COUNT(DISTINCT test_bounce_sessions.website_session_id) AS bounced_sessions,
    COUNT(DISTINCT test_bounce_sessions.website_session_id)/COUNT(DISTINCT test_sessions_lp.website_session_id) AS bounce_rate
FROM
	test_sessions_lp
    LEFT JOIN test_bounce_sessions
    ON test_sessions_lp.website_session_id = test_bounce_sessions.website_session_id
GROUP BY 
	test_sessions_lp.landing_page;

-------------------------------------------------------------------------------------------
-- landing page trend analysis (paid search - non brand, 0601-0831, weekly) 
-- 1. first website_pageview_id and its revelant sessions
-- 2. landing page of each session
-- 3. count of pages per session, to identify bounce sessions
-- 4. summarizing total sessions and bounce sessions 

SELECT * FROM website_sessions;

-- instructor's solution-------------------------------
-- merge 2 stpes (min_pv_id and view_counts)
CREATE TEMPORARY TABLE sessions_min_pv_id_pps
SELECT
	website_sessions.website_session_id,
    MIN(website_pageviews.website_pageview_id) AS first_pv_id,
    COUNT(DISTINCT website_pageviews.website_pageview_id) AS count_pv
FROM
	website_sessions
    LEFT JOIN website_pageviews
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at > '2012-06-01'
    AND website_sessions.created_at < '2012-08-31'
    AND utm_source = 'gsearch'
    AND utm_campaign = 'nonbrand'
GROUP BY
	website_sessions.website_session_id;

SELECT * FROM sessions_min_pv_id_pps;
-- match lp
CREATE TEMPORARY TABLE sessions_w_counts_lp_created_at
SELECT
	sessions_min_pv_id_pps.website_session_id,
    sessions_min_pv_id_pps.first_pv_id,
    sessions_min_pv_id_pps.count_pv,
    website_pageviews.pageview_url AS landing_page,
    website_pageviews.created_at AS session_created_at
FROM 
	sessions_min_pv_id_pps
    LEFT JOIN website_pageviews
    ON sessions_min_pv_id_pps.first_pv_id = website_pageviews.website_pageview_id;

select * from sessions_w_counts_lp_created_at;

-- last step
-- remember to use case then!

SELECT
	-- YEARWEEK(session_created_at) AS year_week,
    MIN(DATE(session_created_at)) AS week_start_date,
    -- COUNT(DISTINCT website_session_id) AS total_sessions,
    -- COUNT(DISTINCT CASE WHEN count_pv = 1 THEN website_session_id ELSE NULL END) AS bounce_sessions,
    COUNT(DISTINCT CASE WHEN count_pv = 1 THEN website_session_id ELSE NULL END)/COUNT(DISTINCT website_session_id) AS bounce_rate,
    COUNT(DISTINCT CASE WHEN landing_page = '/home' THEN website_session_id ELSE NULL END) AS home_sessions,
    COUNT(DISTINCT CASE WHEN landing_page = '/lander-1' THEN website_session_id ELSE NULL END) AS lander_sessions
FROM 
	sessions_w_counts_lp_created_at
GROUP BY 
	YEARWEEK(session_created_at);
-------------------------------------------------------------------------------------------
-- building conversion funnels
-- CONTEXT: mini funnel from /lander-1 to /thankyou
-- GOAL: number of people of each stage and drop rates
-- STEP
-- 1.revelant sessions and its pageviews
-- 2.identify each revelant pageview as the specific funnel step
-- 3.create session-level conversion funnel view
-- 4.aggreate the data to access the funnel performance

-- '/lander-1'-'/products'-'/the-original-mr-fuzzy'-'/cart'-'/shipping'-'/billing-2'-'/thank-you-for-your-order'
select * from website_pageviews where website_session_id = 38172;

-- DROP TABLE session_level_pages;

CREATE TEMPORARY TABLE session_level_pages
WITH sessions_on_lander AS (
    SELECT 
        website_pageviews.website_session_id
    FROM
        website_pageviews
        INNER JOIN
        website_sessions
        ON website_sessions.website_session_id=website_pageviews.website_session_id
    WHERE
        website_pageviews.pageview_url = '/lander-1'
        AND website_pageviews.created_at < '2012-09-05'
        AND website_pageviews.created_at > '2012-08-05'
        AND website_sessions.utm_source ='gsearch'
        AND website_sessions.utm_campaign ='nonbrand'
    GROUP BY 
        website_pageviews.website_session_id
)

SELECT 
    website_pageviews.website_session_id,
    website_pageviews.pageview_url,
    website_pageviews.created_at,
    CASE WHEN pageview_url ='/products' THEN 1 ELSE 0 END AS products_page,
    CASE WHEN pageview_url ='/the-original-mr-fuzzy' THEN 1 ELSE 0 END AS fuzzy_page,
    CASE WHEN pageview_url ='/cart' THEN 1 ELSE 0 END AS cart_page,
    CASE WHEN pageview_url ='/shipping' THEN 1 ELSE 0 END AS shipping_page,
    CASE WHEN pageview_url ='/billing' THEN 1 ELSE 0 END AS billing_page,
    CASE WHEN pageview_url ='/thank-you-for-your-order' THEN 1 ELSE 0 END AS thank_page
FROM
    website_pageviews
WHERE
    website_pageviews.website_session_id IN (
        SELECT website_session_id 
        FROM sessions_on_lander
    )
    AND website_pageviews.pageview_url IN (
        '/lander-1',
        '/products',
        '/the-original-mr-fuzzy',
        '/cart',
        '/shipping',
        '/billing',
        '/thank-you-for-your-order'
    )
ORDER BY 
    website_pageviews.website_session_id, 
    website_pageviews.created_at;

SELECT * FROM session_level_pages;

SELECT
	website_session_id,
    MAX(products_page) AS products_page_it,
    MAX(fuzzy_page) AS fuzzy_page_it,
    MAX(cart_page) AS cart_page_it,
    MAX(shipping_page) AS shipping_page_it,
    MAX(billing_page) AS billing_page_it,
    MAX(thank_page) AS thank_page_it
FROM
	session_level_pages
GROUP BY 
	website_session_id;

WITH sessions_funnels AS (
	SELECT
	website_session_id,
    MAX(products_page) AS products_page_it,
    MAX(fuzzy_page) AS fuzzy_page_it,
    MAX(cart_page) AS cart_page_it,
    MAX(shipping_page) AS shipping_page_it,
    MAX(billing_page) AS billing_page_it,
    MAX(thank_page) AS thank_page_it
FROM
	session_level_pages
GROUP BY 
	website_session_id)

SELECT 
	COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN products_page_it = 1 THEN website_session_id ELSE NULL END) AS to_products,
    COUNT(DISTINCT CASE WHEN fuzzy_page_it = 1 THEN website_session_id ELSE NULL END) AS to_fuzzy,
	COUNT(DISTINCT CASE WHEN cart_page_it = 1 THEN website_session_id ELSE NULL END) AS to_cart,
    COUNT(DISTINCT CASE WHEN shipping_page_it = 1 THEN website_session_id ELSE NULL END) AS to_shipping,
    COUNT(DISTINCT CASE WHEN billing_page_it = 1 THEN website_session_id ELSE NULL END) AS to_billing,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) AS to_thank

FROM sessions_funnels;

WITH sessions_funnels AS (
	SELECT
	website_session_id,
    MAX(products_page) AS products_page_it,
    MAX(fuzzy_page) AS fuzzy_page_it,
    MAX(cart_page) AS cart_page_it,
    MAX(shipping_page) AS shipping_page_it,
    MAX(billing_page) AS billing_page_it,
    MAX(thank_page) AS thank_page_it
FROM
	session_level_pages
GROUP BY 
	website_session_id)

SELECT 
	COUNT(DISTINCT website_session_id) AS sessions,
    
    COUNT(DISTINCT CASE WHEN products_page_it = 1 THEN website_session_id ELSE NULL END)/COUNT(DISTINCT website_session_id) AS clicked_to_products,
    COUNT(DISTINCT CASE WHEN fuzzy_page_it = 1 THEN website_session_id ELSE NULL END) /COUNT(DISTINCT CASE WHEN products_page_it = 1 THEN website_session_id ELSE NULL END)AS clicked_to_fuzzy,
	COUNT(DISTINCT CASE WHEN cart_page_it = 1 THEN website_session_id ELSE NULL END)/COUNT(DISTINCT CASE WHEN fuzzy_page_it = 1 THEN website_session_id ELSE NULL END) AS clicked_to_cart,
    COUNT(DISTINCT CASE WHEN shipping_page_it = 1 THEN website_session_id ELSE NULL END) /COUNT(DISTINCT CASE WHEN cart_page_it = 1 THEN website_session_id ELSE NULL END) AS clicked_to_shipping,
    COUNT(DISTINCT CASE WHEN billing_page_it = 1 THEN website_session_id ELSE NULL END)/COUNT(DISTINCT CASE WHEN shipping_page_it = 1 THEN website_session_id ELSE NULL END) AS clicked_to_billing,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) /COUNT(DISTINCT CASE WHEN billing_page_it = 1 THEN website_session_id ELSE NULL END) AS clicked_to_thank

FROM sessions_funnels;


-- conversion rate A/B test on billing page

SELECT * 
FROM website_pageviews
WHERE pageview_url='/billing-2'
ORDER BY created_at;

-- pv_id:53550, created_at:2012-09-10 00:13:05, session_id:25325

CREATE TEMPORARY TABLE session_pages
WITH sessions_on_lander AS (
    SELECT 
        website_pageviews.website_session_id
    FROM
        website_pageviews
        INNER JOIN
        website_sessions
        ON website_sessions.website_session_id=website_pageviews.website_session_id
    WHERE
        website_pageviews.pageview_url IN ('/billing', '/billing-2')
        AND website_pageviews.created_at < '2012-11-10'
        AND website_pageviews.created_at > '2012-09-10'
    GROUP BY 
        website_pageviews.website_session_id
)

SELECT 
    website_pageviews.website_session_id,
    website_pageviews.pageview_url,
    website_pageviews.created_at,
    CASE WHEN pageview_url ='/billing' THEN 1 ELSE 0 END AS billing_page,
    CASE WHEN pageview_url ='/billing-2' THEN 1 ELSE 0 END AS billing_2_page,
    CASE WHEN pageview_url ='/thank-you-for-your-order' THEN 1 ELSE 0 END AS thank_page
FROM
    website_pageviews
WHERE
    website_pageviews.website_session_id IN (
        SELECT website_session_id 
        FROM sessions_on_lander
    )
    AND website_pageviews.pageview_url IN (
        '/billing',
        '/billing-2',
        '/thank-you-for-your-order'
    )
ORDER BY 
    website_pageviews.website_session_id, 
    website_pageviews.created_at;

SELECT * FROM session_pages;

SELECT
	website_session_id,
    MAX(billing_page) AS billing_page_it,
    MAX(billing_2_page) AS billing_2_page_it,
    MAX(thank_page) AS thank_page_it
FROM
	session_pages
GROUP BY 
	website_session_id;

WITH sessions_funnels AS (
		SELECT
			website_session_id,
			MAX(billing_page) AS billing_page_it,
			MAX(billing_2_page) AS billing_2_page_it,
			MAX(thank_page) AS thank_page_it
		FROM
			session_pages
		GROUP BY 
			website_session_id)

SELECT 
	CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'
    END AS page,
	COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN billing_page_it = 1 THEN website_session_id ELSE NULL END) AS to_billing,
    COUNT(DISTINCT CASE WHEN billing_2_page_it = 1 THEN website_session_id ELSE NULL END) AS to_billing_2,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) AS to_thank

FROM sessions_funnels
GROUP BY 
    CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'END;





----------------------------------------------------------------------------------------------------------------------------

-- final result
WITH sessions_funnels AS (
		SELECT
			website_session_id,
			MAX(billing_page) AS billing_page_it,
			MAX(billing_2_page) AS billing_2_page_it,
			MAX(thank_page) AS thank_page_it
		FROM
			session_pages
		GROUP BY 
			website_session_id)

SELECT 
	CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'
    END AS page,
	COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) AS orders,
	COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) /COUNT(DISTINCT website_session_id) AS billing_to_orders

FROM sessions_funnels
GROUP BY 
    CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'END;








-------------------------------------------------------------------------------------------------------------------
-- conversion rate A/B test on billing page

SELECT * 
FROM website_pageviews
WHERE pageview_url='/billing-2'
ORDER BY created_at;

-- pv_id:53550, created_at:2012-09-10 00:13:05, session_id:25325

CREATE TEMPORARY TABLE session_pages
WITH sessions_on_lander AS (
    SELECT 
        website_pageviews.website_session_id
    FROM
        website_pageviews
        INNER JOIN
        website_sessions
        ON website_sessions.website_session_id=website_pageviews.website_session_id
    WHERE
        website_pageviews.pageview_url IN ('/billing', '/billing-2')
        AND website_pageviews.created_at < '2012-11-10'
        AND website_pageviews.created_at > '2012-09-10'
    GROUP BY 
        website_pageviews.website_session_id
)

SELECT 
    website_pageviews.website_session_id,
    website_pageviews.pageview_url,
    website_pageviews.created_at,
    CASE WHEN pageview_url ='/billing' THEN 1 ELSE 0 END AS billing_page,
    CASE WHEN pageview_url ='/billing-2' THEN 1 ELSE 0 END AS billing_2_page,
    CASE WHEN pageview_url ='/thank-you-for-your-order' THEN 1 ELSE 0 END AS thank_page
FROM
    website_pageviews
WHERE
    website_pageviews.website_session_id IN (
        SELECT website_session_id 
        FROM sessions_on_lander
    )
    AND website_pageviews.pageview_url IN (
        '/billing',
        '/billing-2',
        '/thank-you-for-your-order'
    )
ORDER BY 
    website_pageviews.website_session_id, 
    website_pageviews.created_at;

SELECT * FROM session_pages;

SELECT
	website_session_id,
    MAX(billing_page) AS billing_page_it,
    MAX(billing_2_page) AS billing_2_page_it,
    MAX(thank_page) AS thank_page_it
FROM
	session_pages
GROUP BY 
	website_session_id;

WITH sessions_funnels AS (
		SELECT
			website_session_id,
			MAX(billing_page) AS billing_page_it,
			MAX(billing_2_page) AS billing_2_page_it,
			MAX(thank_page) AS thank_page_it
		FROM
			session_pages
		GROUP BY 
			website_session_id)

SELECT 
	CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'
    END AS page,
	COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN billing_page_it = 1 THEN website_session_id ELSE NULL END) AS to_billing,
    COUNT(DISTINCT CASE WHEN billing_2_page_it = 1 THEN website_session_id ELSE NULL END) AS to_billing_2,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) AS to_thank

FROM sessions_funnels
GROUP BY 
    CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'END;







-- final result
WITH sessions_funnels AS (
		SELECT
			website_session_id,
			MAX(billing_page) AS billing_page_it,
			MAX(billing_2_page) AS billing_2_page_it,
			MAX(thank_page) AS thank_page_it
		FROM
			session_pages
		GROUP BY 
			website_session_id)

SELECT 
	CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'
    END AS page,
	COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) AS orders,
	COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) /COUNT(DISTINCT website_session_id) AS billing_to_orders

FROM sessions_funnels
GROUP BY 
    CASE
        WHEN billing_page_it = 1 THEN 'Billing Page'
        WHEN billing_2_page_it = 1 THEN 'Billing-2 Page'END;







-- channel portfolio
-- '2012-08-22' '2012-11-29'

SELECT
    WEEK(website_sessions.created_at),
    MIN(DATE(website_sessions.created_at)),
    COUNT(DISTINCT website_sessions.website_session_id) AS totai_sessions,
    COUNT(DISTINCT CASE WHEN utm_source='gsearch' THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_sessions,
    COUNT(DISTINCT CASE WHEN utm_source='bsearch' THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_sessions
FROM
	website_sessions
    LEFT JOIN website_pageviews
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at < '2012-11-29'
    AND website_sessions.created_at > '2012-08-22'
    AND utm_campaign='nonbrand'
GROUP BY 
	1;
    
-- % of traffic coming from mobile on gsearch and bsearch 
SELECT
	website_sessions.utm_source,
    COUNT(DISTINCT website_sessions.website_session_id) AS totai_sessions,
    COUNT(DISTINCT CASE WHEN device_type ='mobile'THEN website_sessions.website_session_id ELSE NULL END) AS mobile_sessions,
    COUNT(DISTINCT CASE WHEN device_type ='mobile'THEN website_sessions.website_session_id ELSE NULL END) /COUNT(DISTINCT website_sessions.website_session_id) AS pct_mobile
FROM
	website_sessions
    LEFT JOIN website_pageviews
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at < '2012-11-30'
    AND website_sessions.created_at > '2012-08-22'
    AND utm_campaign='nonbrand'
GROUP BY 
	1;

-- cvr by utm_source and device_type
SELECT
	website_sessions.device_type,
    website_sessions.utm_source,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id)/COUNT(DISTINCT website_sessions.website_session_id) AS cvr
FROM
	website_sessions
    LEFT JOIN orders
    ON website_sessions.website_session_id=orders.website_session_id
WHERE
	website_sessions.created_at < '2012-09-19'
    AND website_sessions.created_at > '2012-08-22'
    AND utm_campaign='nonbrand'
GROUP BY 
	1,2;
    
-- weekly sessions for g/b nonbrand by device_type, > '2012-11-04', <'2012-12-22', b/g percent
-- note: b/g percent is to show the biding down influence on b, To do this, we try to eliminate extra variables, so we only compare bsearch as a pct of gsearch.
SELECT
	-- WEEK(website_sessions.created_at),
    MIN(DATE(website_sessions.created_at)),
    COUNT(DISTINCT CASE WHEN utm_source='gsearch' AND device_type ='desktop'THEN website_sessions.website_session_id ELSE NULL END) AS g_desktop_sessions,
    COUNT(DISTINCT CASE WHEN utm_source='bsearch' AND device_type ='desktop'THEN website_sessions.website_session_id ELSE NULL END) AS b_desktop_sessions,
    COUNT(DISTINCT CASE WHEN utm_source='bsearch' AND device_type ='desktop'THEN website_sessions.website_session_id ELSE NULL END)/COUNT(DISTINCT CASE WHEN utm_source='gsearch' AND device_type ='desktop'THEN website_sessions.website_session_id ELSE NULL END) AS b_g_desktop_pct,
    COUNT(DISTINCT CASE WHEN utm_source='gsearch' AND device_type ='mobile'THEN website_sessions.website_session_id ELSE NULL END) AS g_mobile_sessions,
    COUNT(DISTINCT CASE WHEN utm_source='bsearch' AND device_type ='mobile'THEN website_sessions.website_session_id ELSE NULL END) AS b_mobile_sessions,
    COUNT(DISTINCT CASE WHEN utm_source='bsearch' AND device_type ='mobile'THEN website_sessions.website_session_id ELSE NULL END)/COUNT(DISTINCT CASE WHEN utm_source='gsearch' AND device_type ='mobile'THEN website_sessions.website_session_id ELSE NULL END) AS b_g_mobile_pct
FROM
	website_sessions
    LEFT JOIN website_pageviews
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at < '2012-12-22'
    AND website_sessions.created_at > '2012-11-04'
    AND utm_campaign='nonbrand'
GROUP BY 
	WEEK(website_sessions.created_at);
    
select DISTINCT utm_source, utm_campaign,http_referer from website_sessions 
where created_at<'2012-12-23';

-- monthly, organic, direct,paid sessions, and show thses sessions as a % of paid nonbrand '2012-12-23'
-- notes: 
-- 		utm_campaign = 'nonbrand' --paid nonbrand
-- 	 	utm_campaign = 'brand'  	paid brand
-- 		utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com') - organic search
-- 		utm_source IS NULL AND http_referer IS NULL -- direct search
SELECT
	YEAR(website_sessions.created_at),
    MONTH(website_sessions.created_at),
    COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS nonbrand_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign IN ( 'brand', NULL ) THEN website_sessions.website_session_id ELSE NULL END) AS brand_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign IN ( 'brand', NULL ) THEN website_sessions.website_session_id ELSE NULL END)/COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS brand_pct_nonbrand,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com') THEN website_sessions.website_session_id ELSE NULL END) AS organic_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com')  THEN website_sessions.website_session_id ELSE NULL END)/COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS organic_pct_nonbrand,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) /COUNT(DISTINCT CASE WHEN utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS direct_pct_nonbrand
    
FROM
	website_sessions
WHERE
	website_sessions.created_at < '2012-12-23'
GROUP BY 
	1,2;


-- another solution: 
WITH session_counts AS (
    SELECT
        website_sessions.website_session_id,
        YEAR(website_sessions.created_at) AS session_year,
        MONTH(website_sessions.created_at) AS session_month,
        CASE 
            WHEN utm_campaign = 'nonbrand' THEN 1 
            ELSE 0 
        END AS nonbrand_session,
        CASE 
            WHEN utm_campaign = 'brand' THEN 1 
            ELSE 0 
        END AS brand_session,
        CASE 
            WHEN utm_source IS NULL AND http_referer IN ('https://www.gsearch.com', 'https://www.bsearch.com') THEN 1 
            ELSE 0 
        END AS organic_session,
        CASE 
            WHEN utm_source IS NULL AND http_referer IS NULL THEN 1 
            ELSE 0 
        END AS direct_session
    FROM 
        website_sessions
    WHERE
        website_sessions.created_at < '2012-12-23'
)

SELECT
    session_year,
    session_month,
    COUNT(DISTINCT CASE WHEN nonbrand_session = 1 THEN website_session_id ELSE NULL END) AS nonbrand_sessions,
    COUNT(DISTINCT CASE WHEN brand_session = 1 THEN website_session_id ELSE NULL END) AS brand_sessions,
    COUNT(DISTINCT CASE WHEN brand_session = 1 THEN website_session_id ELSE NULL END) * 100.0 / NULLIF(COUNT(DISTINCT CASE WHEN nonbrand_session = 1 THEN website_session_id ELSE NULL END), 0) AS brand_pct_nonbrand,
    COUNT(DISTINCT CASE WHEN organic_session = 1 THEN website_session_id ELSE NULL END) AS organic_sessions,
    COUNT(DISTINCT CASE WHEN organic_session = 1 THEN website_session_id ELSE NULL END) * 100.0 / NULLIF(COUNT(DISTINCT CASE WHEN nonbrand_session = 1 THEN website_session_id ELSE NULL END), 0) AS organic_pct_nonbrand,
    COUNT(DISTINCT CASE WHEN direct_session = 1 THEN website_session_id ELSE NULL END) AS direct_sessions,
    COUNT(DISTINCT CASE WHEN direct_session = 1 THEN website_session_id ELSE NULL END) * 100.0 / NULLIF(COUNT(DISTINCT CASE WHEN nonbrand_session = 1 THEN website_session_id ELSE NULL END), 0) AS direct_pct_nonbrand
FROM 
    session_counts
GROUP BY
    session_year, session_month
ORDER BY
    session_year, session_month;


----------------------------------------------------

-- sesaonality
-- monthly and weekly sessions to orders
SELECT
    YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT website_sessions.website_session_id) AS totai_sessions,
    COUNT(DISTINCT orders.order_id) AS orders
FROM
	website_sessions
    LEFT JOIN orders
    ON website_sessions.website_session_id=orders.website_session_id
WHERE
	website_sessions.created_at < '2013-01-01'
GROUP BY 
	1,2;

SELECT
    WEEK(website_sessions.created_at) AS mo,
    MIN(DATE(website_sessions.created_at)),
    COUNT(DISTINCT website_sessions.website_session_id) AS totai_sessions,
    COUNT(DISTINCT orders.order_id) AS orders
FROM
	website_sessions
    LEFT JOIN orders
    ON website_sessions.website_session_id=orders.website_session_id
WHERE
	website_sessions.created_at < '2013-01-01'
GROUP BY 
	YEAR(website_sessions.created_at),
    WEEK(website_sessions.created_at);


-- average sessions volume, by hour of the day and by dayweek '2012-09-15' '2012-11-15'
WITH session_counts AS (
	SELECT
		DATE(website_sessions.created_at) AS created_at,
        WEEKDAY(website_sessions.created_at) AS wekday,
        HOUR(website_sessions.created_at) AS hr,
		COUNT(DISTINCT website_sessions.website_session_id) AS sessions
	FROM website_sessions
    WHERE
		website_sessions.created_at < '2012-11-15'
		AND website_sessions.created_at > '2012-09-15'
	GROUP BY
		1,2,3)
SELECT
    hr,
    ROUND(AVG(CASE WHEN wekday = 0 THEN sessions ELSE NULL END ),1) AS mon,
    ROUND(AVG(CASE WHEN wekday = 1 THEN sessions ELSE NULL END ),1) AS tue,
    ROUND(AVG(CASE WHEN wekday = 2 THEN sessions ELSE NULL END ),1) AS wed,
    ROUND(AVG(CASE WHEN wekday = 3 THEN sessions ELSE NULL END ),1) AS thu,
    ROUND(AVG(CASE WHEN wekday = 4 THEN sessions ELSE NULL END ),1) AS fri,
    ROUND(AVG(CASE WHEN wekday = 5 THEN sessions ELSE NULL END ),1) AS sat,
    ROUND(AVG(CASE WHEN wekday = 6 THEN sessions ELSE NULL END ),1) AS sun
FROM
	session_counts
GROUP BY 
	1
Order By
	1;













-- midterm project '2012-11-27'
-- tasks:
-- 1. monthly trends for gsearch sessions ans orders
-- 2. monthly trends for gsearch sessions ans orders spliting into brand and nonbrand
-- 3. gsearch, monthly sessions and orders spiliting by device types
-- 4. monthly trends for gsearch and other channels
-- 5. first 8 months'session to order conversion rate
-- 6. estimate the gsearch lander test revenue, and use non-brand sessions and revenue caculating incremental values
-- 7. conversion funnel rates for 2 landing page
-- 8. revenue per billing page session





-- 1. monthly trend
SELECT
	YEAR(website_sessions.created_at),
    MONTH(website_sessions.created_at),
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(CASE WHEN website_pageviews.pageview_url='/thank-you-for-your-order' THEN website_sessions.website_session_id ELSE NULL END) AS orders
FROM
	website_sessions
    LEFT JOIN website_pageviews
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at < '2012-11-27'
    AND utm_source ='gsearch'
GROUP BY 
	1,2;
    
    
    
    
    
-- 2. monthly trends for gsearch sessions ans orders spliting into brand and nonbrand
SELECT
	YEAR(website_sessions.created_at),
    MONTH(website_sessions.created_at),
    COUNT(CASE WHEN website_sessions.utm_campaign = 'brand' THEN website_sessions.website_session_id ELSE NULL END) AS brand_sessions,
	COUNT(CASE WHEN  website_sessions.utm_campaign = 'brand' THEN orders.order_id ELSE NULL END) AS brand_orders, -- from the instructor 
    COUNT(CASE WHEN website_sessions.utm_campaign = 'nonbrand' THEN website_sessions.website_session_id ELSE NULL END) AS nonbrand_sessions,
    COUNT(CASE WHEN  website_sessions.utm_campaign = 'nonbrand' THEN orders.order_id ELSE NULL END) AS nonbrand_orders -- using order id to identify and split prders
FROM
	website_sessions
    LEFT JOIN orders
    ON orders.website_session_id=website_sessions.website_session_id
WHERE
	website_sessions.created_at < '2012-11-27'
    AND utm_source ='gsearch'
GROUP BY 
	1,2;






-- 3. gsearch, monthly sessions and orders spiliting by device types

-- from instrcutor: 
SELECT
	YEAR(website_sessions.created_at),
    MONTH(website_sessions.created_at),
    COUNT(CASE WHEN website_sessions.device_type = 'desktop' THEN website_sessions.website_session_id ELSE NULL END) AS desktop_sessions,
	COUNT(CASE WHEN  website_sessions.device_type = 'desktop' THEN orders.order_id ELSE NULL END) AS desktop_orders, -- from the instructor 
    COUNT(CASE WHEN website_sessions.device_type = 'mobile' THEN website_sessions.website_session_id ELSE NULL END) AS mobile_sessions,
    COUNT(CASE WHEN  website_sessions.device_type = 'mobile' THEN orders.order_id ELSE NULL END) AS mobile_orders -- using order id to identify and split prders
FROM
	website_sessions
    LEFT JOIN orders
    ON orders.website_session_id=website_sessions.website_session_id
WHERE
	website_sessions.created_at < '2012-11-27'
    AND utm_source ='gsearch'
    AND utm_campaign ='nonbrand'
GROUP BY 
	1,2;

SELECT
	MONTH(website_sessions.created_at),
    website_sessions.device_type,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(CASE WHEN website_pageviews.pageview_url='/thank-you-for-your-order' THEN website_sessions.website_session_id ELSE NULL END) AS orders
FROM
	website_sessions
    LEFT JOIN website_pageviews
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at < '2012-11-27'
    AND utm_source ='gsearch'
GROUP BY 
	MONTH(website_sessions.created_at),
    website_sessions.device_type
ORDER BY
	MONTH(website_sessions.created_at);
    
    
    
    
-- 4. monthly trends for gsearch and other channels
-- instuctor

SELECT DISTINCT
	utm_source,
    utm_campaign,
    http_referer
FROM	website_sessions
WHERE created_at < '2012-11-27';

-- NOTE: understand how to identify different channel through utm-source/campaign and http_refre
-- in general: paid search and organic seach and direct search

SELECT
	YEAR(website_sessions.created_at),
    MONTH(website_sessions.created_at),
    COUNT(DISTINCT CASE WHEN utm_source ='gsearch' THEN website_sessions.website_session_id ELSE NULL END) AS gsearch_sessions,
    COUNT(DISTINCT CASE WHEN utm_source ='bsearch' THEN website_sessions.website_session_id ELSE NULL END) AS bsearch_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_sessions
FROM
	website_sessions
WHERE
	website_sessions.created_at < '2012-11-27'
GROUP BY 
	1,2;




-- 5. first 8 months'session to order conversion rate
-- ps: can also use orders.order_id to count the orders.
SELECT
	MONTH(website_sessions.created_at),
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(CASE WHEN website_pageviews.pageview_url='/thank-you-for-your-order' THEN website_sessions.website_session_id ELSE NULL END) AS orders,
    COUNT(CASE WHEN website_pageviews.pageview_url='/thank-you-for-your-order'THEN website_sessions.website_session_id ELSE NULL END)/ COUNT(DISTINCT website_sessions.website_session_id) AS conversion_rate
FROM
	website_sessions
    LEFT JOIN website_pageviews
    ON website_sessions.website_session_id=website_pageviews.website_session_id
WHERE
	website_sessions.created_at < '2012-11-27'
GROUP BY 
	MONTH(website_sessions.created_at);



-- 6. estimate the gsearch lander test revenue, and use non-brand sessions and revenue caculating incremental values
-- find the first session id for gsearch lander, and how many session and orders after this.


-- 7. conversion funnel rates for 2 landing page

CREATE TEMPORARY TABLE session_landing_pages
WITH sessions_on_lander AS (
    SELECT 
        website_pageviews.website_session_id
    FROM
        website_pageviews
        INNER JOIN
        website_sessions
        ON website_sessions.website_session_id=website_pageviews.website_session_id
    WHERE
        website_pageviews.pageview_url IN ('/home', '/lander-1')
        AND website_pageviews.created_at < '2012-11-27'
    GROUP BY 
        website_pageviews.website_session_id
)

SELECT 
    website_pageviews.website_session_id,
    website_pageviews.pageview_url,
    website_pageviews.created_at,
    CASE WHEN pageview_url ='/home' THEN 1 ELSE 0 END AS home_page,
    CASE WHEN pageview_url ='/lander-1' THEN 1 ELSE 0 END AS lander_1_page,
    CASE WHEN pageview_url ='/thank-you-for-your-order' THEN 1 ELSE 0 END AS thank_page
FROM
    website_pageviews
WHERE
    website_pageviews.website_session_id IN (
        SELECT website_session_id 
        FROM sessions_on_lander
    )
    AND website_pageviews.pageview_url IN (
        '/home',
        '/lander-1',
        '/thank-you-for-your-order'
    )
ORDER BY 
    website_pageviews.website_session_id, 
    website_pageviews.created_at;

SELECT * FROM session_landing_pages;

SELECT
	website_session_id,
    MAX(home_page) AS home_page_it,
    MAX(lander_1_page) AS lander_1_page_it,
    MAX(thank_page) AS thank_page_it
FROM
	session_landing_pages
GROUP BY 
	website_session_id;

WITH sessions_funnels AS (
			SELECT
				website_session_id,
				MAX(home_page) AS home_page_it,
				MAX(lander_1_page) AS lander_1_page_it,
				MAX(thank_page) AS thank_page_it
			FROM
				session_landing_pages
			GROUP BY 
				website_session_id)
SELECT 
	CASE
        WHEN home_page_it = 1 THEN 'home Page'
        WHEN lander_1_page_it = 1 THEN 'lander_1 Page'
    END AS page,
	COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN home_page_it = 1 THEN website_session_id ELSE NULL END) AS to_home,
    COUNT(DISTINCT CASE WHEN lander_1_page_it = 1 THEN website_session_id ELSE NULL END) AS to_lander_1,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) AS to_thank,
    COUNT(DISTINCT CASE WHEN thank_page_it = 1 THEN website_session_id ELSE NULL END) / COUNT(DISTINCT website_session_id) AS conversion_rate

FROM sessions_funnels
GROUP BY 
    CASE
        WHEN home_page_it = 1 THEN 'home Page'
        WHEN lander_1_page_it = 1 THEN 'lander_1 Page'END;

-- 8. revenue per billing page session
-- both billing page- order_id- price_used
-- sum(price)/sessions intotal









-- user analysis
-- repeat user

CREATE TEMPORARY TABLE new_repeat
WITH new_session AS (SELECT 
user_id,
website_session_id
FROM website_sessions
WHERE 
	is_repeat_session = 0
    AND created_at > '2014-01-01'
    AND created_at < '2014-11-01')
SELECT
	new_session.user_id,
    new_session.website_session_id AS new_session_id,
    website_sessions.website_session_id AS repeat_session_id
FROM
	new_session
    LEFT JOIN website_sessions
    ON new_session.user_id=website_sessions.user_id
    AND website_sessions.is_repeat_session = 1;

WITH user_level AS (    
SELECT
	user_id,
    COUNT(DISTINCT new_session_id) AS new_sessions,
    COUNT(DISTINCT repeat_session_id) AS repeat_sessions
FROM
	new_repeat
GROUP BY
	1
ORDER BY 
	3 DESC)
SELECT 
	repeat_sessions,
    COUNT(DISTINCT user_id) AS users
FROM user_level
GROUP BY
	1;
    











-- cross sell on the '/cart' page, CTR, avg products per order, AOV, revenue per /cart page view.
-- ‘2013-09-25‘ before and after 1 month
-- steps:
-- 1.time period, session id with /cart, next_pageview
-- 2.order


CREATE TEMPORARY TABLE session_next_pv
WITH session_time AS (
SELECT
 website_session_id,
 website_pageview_id AS cart_pv,
CASE 
	WHEN created_at > '2013-09-25' THEN 'Post_period'
    WHEN created_at < '2013-09-25' THEN 'Pre_period'
	ELSE NULL END AS time_period
FROM 
	website_pageviews
WHERE
	created_at > '2013-08-25'
    AND created_at < '2013-10-25'
    AND pageview_url = '/cart')

SELECT 
    session_time.website_session_id,
    session_time.time_period,
    CASE WHEN website_pageviews.website_pageview_id > cart_pv THEN website_pageviews.website_pageview_id ELSE NULL END AS next_pv
FROM 
	session_time
    LEFT JOIN website_pageviews
    ON website_pageviews.website_session_id=session_time.website_session_id;

SELECT * FROM session_next_pv;

SELECT * FROM orders;

WITH cxsell AS (SELECT 
	session_next_pv.website_session_id,
    session_next_pv.time_period,
    MIN(session_next_pv.next_pv) AS cart_ct,
    orders.price_usd,
    orders.items_purchased
FROM 
	session_next_pv
    LEFT JOIN orders
    ON session_next_pv.website_session_id=orders.website_session_id
GROUP BY 
	session_next_pv.website_session_id)
SELECT
	cxsell.time_period,
    COUNT(DISTINCT website_session_id) AS cart_sessions,
    COUNT(DISTINCT cart_ct) AS clickthrough,
    COUNT(DISTINCT cart_ct) /COUNT(DISTINCT website_session_id) AS cart_ctr,
    SUM(items_purchased)/COUNT(CASE WHEN items_purchased IS NOT NULL THEN 1 ELSE NULL END) AS products_per_order,
    SUM(price_usd)/COUNT(CASE WHEN items_purchased IS NOT NULL THEN 1 ELSE NULL END) AS AOV,
    SUM(price_usd)/COUNT(DISTINCT website_session_id) AS revenue_per_cart_view
FROM 
	cxsell
GROUP BY
	cxsell.time_period;
    
-- product added on portfolio
-- '2013-12-12' bear launch, 1 month before and after, session to order rt, AOV, products per order, revenue per session


WITH bear AS (SELECT
 website_sessions.website_session_id,
 orders.order_id,
 orders.items_purchased,
 orders.price_usd,
CASE 
	WHEN website_sessions.created_at < '2013-12-12' THEN 'Pre_period'
    WHEN website_sessions.created_at > '2013-12-12' THEN 'Post_period'
	ELSE NULL END AS time_period
FROM 
	website_sessions
    LEFT JOIN orders
    ON website_sessions.website_session_id=orders.website_session_id
WHERE
	website_sessions.created_at > '2013-11-12'
    AND website_sessions.created_at < '2014-1-12'
GROUP BY
	website_sessions.website_session_id)

SELECT
	bear.time_period,
    COUNT(DISTINCT order_id)/COUNT(DISTINCT website_session_id) AS cvr,
    SUM(items_purchased)/COUNT(CASE WHEN items_purchased IS NOT NULL THEN 1 ELSE NULL END) AS products_per_order,
    SUM(price_usd)/COUNT(CASE WHEN items_purchased IS NOT NULL THEN 1 ELSE NULL END) AS AOV,
    SUM(price_usd)/COUNT(DISTINCT website_session_id) AS revenue_per_session
FROM
	bear
GROUP BY
	1;
    
-- refund rate
SELECT * FROM order_items;
SELECT * FROM order_item_refunds;
-- COUNT(CASE WHEN order_items.product_id = '1' THEN order_items.order_id ELSE NULL END) AS p1_orders,
-- COUNT(CASE WHEN order_items.product_id = '2' THEN order_items.order_id ELSE NULL END) AS p2_orders,
-- COUNT(CASE WHEN order_items.product_id = '3' THEN order_items.order_id ELSE NULL END) AS p3_orders,
-- COUNT(CASE WHEN order_items.product_id = '4' THEN order_items.order_id ELSE NULL END) AS p4_orders,

WITH refund AS (SELECT
	YEAR(order_items.created_at) AS yr,
	MONTH (order_items.created_at) AS mo,
	order_items.order_id AS original_order_id,
	order_item_refunds.order_id,
    order_items.product_id,
	CASE WHEN order_item_refunds.order_item_id = order_items.order_item_id THEN order_items.product_id ELSE NULL END AS refund_p
FROM
	order_items
    LEFT JOIN order_item_refunds
    ON
    order_items.order_id=order_item_refunds.order_id
WHERE
	order_items.created_at< '2014-10-15')

SELECT
 yr,
 mo,
 COUNT(CASE WHEN refund.product_id = '1' THEN refund.order_id ELSE NULL END) AS p1_orders,
 COUNT(CASE WHEN refund_p = '1' THEN refund.order_id ELSE NULL END)/
	COUNT(CASE WHEN refund.product_id = '1' THEN refund.order_id ELSE NULL END) AS p1_rt,
 COUNT(CASE WHEN refund.product_id = '2' THEN refund.order_id ELSE NULL END) AS p2_orders,
  COUNT(CASE WHEN refund_p = '2' THEN refund.order_id ELSE NULL END)/
	COUNT(CASE WHEN refund.product_id = '2' THEN refund.order_id ELSE NULL END) AS p2_rt,
 COUNT(CASE WHEN refund.product_id = '3' THEN refund.order_id ELSE NULL END) AS p3_orders,
  COUNT(CASE WHEN refund_p = '3' THEN refund.order_id ELSE NULL END)/
	COUNT(CASE WHEN refund.product_id = '3' THEN refund.order_id ELSE NULL END) AS p3_rt,
 COUNT(CASE WHEN refund.product_id = '4' THEN refund.order_id ELSE NULL END) AS p4_orders,
  COUNT(CASE WHEN refund_p = '4' THEN refund.order_id ELSE NULL END)/
	COUNT(CASE WHEN refund.product_id = '4' THEN refund.order_id ELSE NULL END) AS p4_rt
FROM
	refund
GROUP BY
	1,2;
    







-- comparing 2 products from /product to conversion, put conversion funnels and all traffic

-- relevent sessions
SELECT *
FROM website_pageviews
GROUP BY pageview_url;

CREATE TEMPORARY TABLE session_id_products
SELECT
	website_session_id,
    CASE 
		WHEN
		pageview_url ='/the-original-mr-fuzzy' THEN 'fuzzy'
        WHEN
        pageview_url ='/the-forever-love-bear' THEN 'bear'
        ELSE NULL
	END AS products
FROM
	website_pageviews
WHERE
	created_at > '2013-01-06'
    AND created_at < '2013-04-10'
    AND pageview_url IN ('/the-original-mr-fuzzy','/the-forever-love-bear');

SELECT * FROM session_id_products;

WITH products_sessions AS ( SELECT
	session_id_products.products,
    session_id_products.website_session_id,
    website_pageviews.website_pageview_id,
    website_pageviews.pageview_url
FROM session_id_products
	LEFT JOIN
    website_pageviews
    ON website_pageviews.website_session_id=session_id_products.website_session_id ) 

SELECT
	products,
    COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(CASE WHEN pageview_url='/cart' THEN website_session_id ELSE NULL END) AS to_cart,
    COUNT(CASE WHEN pageview_url='/shipping' THEN website_session_id ELSE NULL END) AS to_shipping,
    COUNT(CASE WHEN pageview_url='/billing-2' THEN website_session_id ELSE NULL END) AS to_bill,
    COUNT(CASE WHEN pageview_url='/thank-you-for-your-order' THEN website_session_id ELSE NULL END) AS to_order
FROM 
	products_sessions
GROUP BY
	1;

WITH products_sessions AS ( SELECT
	session_id_products.products,
    session_id_products.website_session_id,
    website_pageviews.website_pageview_id,
    website_pageviews.pageview_url
FROM session_id_products
	LEFT JOIN
    website_pageviews
    ON website_pageviews.website_session_id=session_id_products.website_session_id ) 

SELECT
	products,
    COUNT(CASE WHEN pageview_url='/cart' THEN website_session_id ELSE NULL END) 
		/COUNT(DISTINCT website_session_id)AS product_click_rt,
    COUNT(CASE WHEN pageview_url='/shipping' THEN website_session_id ELSE NULL END) 
		/COUNT(CASE WHEN pageview_url='/cart' THEN website_session_id ELSE NULL END) AS cart_click_rt,
    COUNT(CASE WHEN pageview_url='/billing-2' THEN website_session_id ELSE NULL END) 
		/COUNT(CASE WHEN pageview_url='/shipping' THEN website_session_id ELSE NULL END) AS shipping_click_rt,
    COUNT(CASE WHEN pageview_url='/thank-you-for-your-order' THEN website_session_id ELSE NULL END) 
		/COUNT(CASE WHEN pageview_url='/billing-2' THEN website_session_id ELSE NULL END) AS bill_click_rt
FROM 
	products_sessions
GROUP BY
	1;













-- product analysis

-- monthly 
SELECT
	YEAR(created_at) AS yr,
    MONTH(created_at) AS mo,
    COUNT(DISTINCT order_id) AS number_of_sales,
    SUM(price_usd) AS total_revenue,
    SUM(price_usd - cogs_usd) AS total_margin
FROM orders
WHERE created_at < '2013-01-03'
GROUP BY
	1,2;
    
-- launed products: monthly order volume,overall cvr, revenue per session, breakdown sales by products
-- 		'2012-04-01'-'2013-04-05'

SELECT
	YEAR(website_sessions.created_at) AS yr,
    MONTH(website_sessions.created_at) AS mo,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id) /COUNT(DISTINCT website_sessions.website_session_id) AS cvr,
    SUM(orders.price_usd)/ COUNT(DISTINCT website_sessions.website_session_id) AS revenue_per_session,
    COUNT(DISTINCT CASE WHEN primary_product_id = 1 THEN website_sessions.website_session_id ELSE NULL END) AS product_one_orders,
    COUNT(DISTINCT CASE WHEN primary_product_id = 2 THEN website_sessions.website_session_id ELSE NULL END) AS product_two_orders,
    SUM(orders.price_usd - cogs_usd) AS total_margin
FROM 
	website_sessions
	LEFT JOIN orders
    ON website_sessions.website_session_id=orders.website_session_id
WHERE 
	website_sessions.created_at < '2013-04-05'
    AND website_sessions.created_at > '2012-04-01'
GROUP BY
	1,2;




-- Product path analysing: sessions to /product(new) and then the next page:  click through rate after '2013-01-06' and before 3 months
-- '/the-original-mr-fuzzy' '/the-forever-love-bear'

-- from instructor
-- find 'page' sessions

CREATE TEMPORARY TABLE products_pv
SELECT 
	website_session_id,
    website_pageview_id,
    created_at,
    CASE
		WHEN created_at < '2013-01-06' THEN 'A.Pre_Product_2'
        WHEN created_at >= '2013-01-06' THEN 'B.Post_Product_2'
        ELSE NULL
        END AS time_period
FROM
	website_pageviews
WHERE
    pageview_url = '/products'
    AND created_at < '2013-04-06'
    AND created_at > '2012-10-06';

CREATE TEMPORARY TABLE sessions_min_next_pv_id
SELECT
	products_pv.time_period,
    products_pv.website_session_id,
    MIN(website_pageviews.website_pageview_id) AS min_next_pv_id
FROM
	products_pv
    LEFT JOIN website_pageviews
    ON products_pv.website_session_id=website_pageviews.website_session_id
    AND website_pageviews.website_pageview_id > products_pv.website_pageview_id
GROUP BY 1,2;

SELECT * FROM sessions_min_next_pv_id;

CREATE TEMPORARY TABLE sessions_next_pageview_url
SELECT
	sessions_min_next_pv_id.time_period,
    sessions_min_next_pv_id.website_session_id,
    website_pageviews.pageview_url AS next_pageview_url
FROM
	sessions_min_next_pv_id
    LEFT JOIN  website_pageviews
    ON  website_pageviews.website_pageview_id = sessions_min_next_pv_id.min_next_pv_id;

select * from sessions_next_pageview_url;

-- final result
SELECT
	time_period,
    COUNT(DISTINCT website_session_id) AS sessions,
    COUNT(DISTINCT CASE WHEN next_pageview_url IS NOT NULL THEN website_session_id ELSE NULL END) AS w_next_page_sessions,
    COUNT(DISTINCT CASE WHEN next_pageview_url IS NOT NULL THEN website_session_id ELSE NULL END)/
		COUNT(DISTINCT website_session_id) AS pct_w_next_page,
	COUNT(DISTINCT CASE WHEN next_pageview_url = '/the-original-mr-fuzzy' THEN website_session_id ELSE NULL END) AS to_fuzzy,
	COUNT(DISTINCT CASE WHEN next_pageview_url = '/the-original-mr-fuzzy' THEN website_session_id ELSE NULL END)/
		COUNT(DISTINCT website_session_id) AS pct_to_fuzzy,
	COUNT(DISTINCT CASE WHEN next_pageview_url = '/the-forever-love-bear' THEN website_session_id ELSE NULL END) AS to_bear,
    COUNT(DISTINCT CASE WHEN next_pageview_url = '/the-forever-love-bear' THEN website_session_id ELSE NULL END)/
		COUNT(DISTINCT website_session_id) AS pct_to_bear
FROM 
	sessions_next_pageview_url
GROUP BY
	1;



















-- final project
-- 1.volume growth. session to order by quarterly.
-- 2. revenue per order/per session


 SELECT
	YEAR(website_sessions.created_at) AS yr,
    QUARTER(website_sessions.created_at) AS qt,
    COUNT(DISTINCT website_sessions.website_session_id) AS sessions,
    COUNT(DISTINCT orders.order_id) AS orders,
    COUNT(DISTINCT orders.order_id)/
		COUNT(DISTINCT website_sessions.website_session_id) AS session_to_order_cvr,
	SUM(orders.price_usd)/COUNT(DISTINCT orders.order_id) AS revenue_per_order,
    SUM(orders.price_usd)/ COUNT(DISTINCT website_sessions.website_session_id) AS revenue_per_session
FROM 
	website_sessions
    LEFT JOIN orders
    ON website_sessions.website_session_id=orders.website_session_id
GROUP BY
	1,2;
    
-- 3. quarterly view of orders from Gsearch nonbrand, bsearch nonbrand, brand search overall, organic search, direct type in
-- notes: 
-- 		utm_campaign = 'nonbrand' --paid nonbrand
-- 	 	utm_campaign = 'brand'  	paid brand
-- 		utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com') - organic search
-- 		utm_source IS NULL AND http_referer IS NULL -- direct search
SELECT
	YEAR(orders.created_at) AS yr,
    QUARTER(orders.created_at) AS qt,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='gsearch' THEN website_sessions.website_session_id ELSE NULL END) AS gnonbrand_orders,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='bsearch' THEN website_sessions.website_session_id ELSE NULL END) AS bnonbrand_orders,
    COUNT(DISTINCT CASE WHEN utm_campaign IN ( 'brand', NULL ) THEN website_sessions.website_session_id ELSE NULL END) AS brand_orders,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NOT NULL THEN website_sessions.website_session_id ELSE NULL END) AS organic_orders,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_orders
FROM 
	orders
    LEFT JOIN website_sessions
    ON website_sessions.website_session_id=orders.website_session_id
GROUP BY
	1,2;
    
-- 4. above, sessions to orders cvr
SELECT
	YEAR(website_sessions.created_at) AS yr,
    QUARTER(website_sessions.created_at) AS qt,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='gsearch' THEN website_sessions.website_session_id ELSE NULL END) AS gnonbrand_sessions,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='gsearch' THEN orders.order_id ELSE NULL END) AS gnonbrand_orders,
		COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='gsearch' THEN orders.order_id ELSE NULL END) /
			COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='gsearch' THEN website_sessions.website_session_id ELSE NULL END) AS gnonbrand_cvr,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='bsearch' THEN website_sessions.website_session_id ELSE NULL END) AS bnonbrand_sessions,
    COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='bsearch' THEN orders.order_id ELSE NULL END) AS bnonbrand_orders,
		COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='bsearch' THEN orders.order_id ELSE NULL END) /
			COUNT(DISTINCT CASE WHEN website_sessions.utm_campaign = 'nonbrand' AND utm_source='bsearch' THEN website_sessions.website_session_id ELSE NULL END) AS bnonbrand_cvr,
    COUNT(DISTINCT CASE WHEN utm_campaign IN ( 'brand', NULL ) THEN website_sessions.website_session_id ELSE NULL END) AS brand_sessions,
    COUNT(DISTINCT CASE WHEN utm_campaign IN ( 'brand', NULL ) THEN orders.order_id ELSE NULL END) AS brand_orders,
		COUNT(DISTINCT CASE WHEN utm_campaign IN ( 'brand', NULL ) THEN orders.order_id ELSE NULL END)/
			COUNT(DISTINCT CASE WHEN utm_campaign IN ( 'brand', NULL ) THEN website_sessions.website_session_id ELSE NULL END)  AS brand_cvr,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com') THEN website_sessions.website_session_id ELSE NULL END) AS organic_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com') THEN orders.order_id ELSE NULL END) AS organic_orders,
		COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com') THEN orders.order_id ELSE NULL END)/
			COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IN ('https://www.gsearch.com','https://www.bsearch.com') THEN website_sessions.website_session_id ELSE NULL END) AS organic_cvr,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_sessions,
    COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN orders.order_id ELSE NULL END) AS direct_orders,
		COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN orders.order_id ELSE NULL END) /
			COUNT(DISTINCT CASE WHEN utm_source IS NULL AND http_referer IS NULL THEN website_sessions.website_session_id ELSE NULL END) AS direct_cvr
FROM 
	website_sessions
    LEFT JOIN orders
    ON website_sessions.website_session_id=orders.website_session_id
GROUP BY
	1,2;
    
-- 5.monthly trending of revenue and margin by product, total sales and revenue 
SELECT 
	YEAR (created_at) AS yr,
    MONTH(created_at) AS mo,
    SUM(price_usd) AS total_sales,
    SUM(CASE WHEN product_id = '1' THEN price_usd ELSE NULL END) AS p1_revenue,
    SUM(CASE WHEN product_id = '1' THEN price_usd ELSE NULL END) - SUM(CASE WHEN product_id = '1' THEN cogs_usd ELSE NULL END) AS p1_margin,
    SUM(CASE WHEN product_id = '2' THEN price_usd ELSE NULL END) AS p2_revenue,
    SUM(CASE WHEN product_id = '2' THEN price_usd ELSE NULL END) - SUM(CASE WHEN product_id = '2' THEN cogs_usd ELSE NULL END) AS p2_margin,
    SUM(CASE WHEN product_id = '3' THEN price_usd ELSE NULL END) AS p3_revenue,
    SUM(CASE WHEN product_id = '3' THEN price_usd ELSE NULL END) - SUM(CASE WHEN product_id = '3' THEN cogs_usd ELSE NULL END) AS p3_margin,
    SUM(CASE WHEN product_id = '4' THEN price_usd ELSE NULL END) AS p4_revenue,
    SUM(CASE WHEN product_id = '4' THEN price_usd ELSE NULL END) - SUM(CASE WHEN product_id = '4' THEN cogs_usd ELSE NULL END) AS p4_margin
FROM
	order_items
GROUP BY
	1,2;
    
    
-- 6.monthly sessions to /products, % of sessions click through, cvr from /product
WITH product_sessions AS (
    SELECT 
        YEAR(website_pageviews.created_at) AS yr,
        MONTH(website_pageviews.created_at) AS mo,
        website_pageviews.website_session_id AS product_session,
        MIN(website_pageviews.created_at) AS product_view_time
    FROM
        website_pageviews
    WHERE
        pageview_url = '/products'
    GROUP BY 
        1, 2, 3
)
SELECT 
    product_sessions.yr,
    product_sessions.mo,
    COUNT(DISTINCT product_sessions.product_session) AS total_product_sessions,
    COUNT(DISTINCT CASE 
        WHEN website_pageviews.created_at > product_sessions.product_view_time THEN product_sessions.product_session 
        ELSE NULL 
    END) AS clicked_sessions,
    (COUNT(DISTINCT CASE 
        WHEN website_pageviews.created_at > product_sessions.product_view_time THEN product_sessions.product_session 
        ELSE NULL 
    END) / COUNT(DISTINCT product_sessions.product_session)) * 100 AS click_through_rate
FROM 
    product_sessions
    LEFT JOIN website_pageviews 
    ON product_sessions.product_session = website_pageviews.website_session_id
GROUP BY 
    1, 2;


-- 7.'2014-12-05', 4th product, cross-sell, sales
DROP TABLE primary_products;
CREATE TEMPORARY TABLE primary_products
SELECT 
    primary_product_id,
    order_id,
    created_at AS orderd_at
FROM 
	orders
WHERE
	orders.created_at >'2014-12-05';
 
WITH cxsell AS (
	SELECT 
		primary_products.*,
        order_items.product_id AS cross_sell_product_id
	FROM
		primary_products
        LEFT JOIN order_items
        ON order_items.order_id=primary_products.order_id
        AND order_items.is_primary_item = 0 )
    
SELECT
	primary_product_id,
    COUNT(DISTINCT order_id) AS total_orders,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 1 THEN order_id ELSE NULL END) AS cxsold_1,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 2 THEN order_id ELSE NULL END) AS cxsold_2,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 3 THEN order_id ELSE NULL END) AS cxsold_3,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 4 THEN order_id ELSE NULL END) AS cxsold_4,
	COUNT(DISTINCT CASE WHEN cross_sell_product_id = 1 THEN order_id ELSE NULL END) / COUNT(DISTINCT order_id) AS p1_cxsell_rt,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 2 THEN order_id ELSE NULL END) / COUNT(DISTINCT order_id) AS p2_cxsell_rt,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 3 THEN order_id ELSE NULL END) / COUNT(DISTINCT order_id) AS p3_cxsell_rt,
    COUNT(DISTINCT CASE WHEN cross_sell_product_id = 4 THEN order_id ELSE NULL END) / COUNT(DISTINCT order_id) AS p4_cxsell_rt
FROM
	cxsell
GROUP BY
	1;

